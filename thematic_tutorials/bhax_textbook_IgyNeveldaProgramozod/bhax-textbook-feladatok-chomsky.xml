<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id511324">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#id511324</link>               
        </para>
        <para>
            A Turing gép mülködését Alan Turing angol matematikus dolgozta ki 1936-ban az egyik cikkében. A gép matematikai 
            számítások, algoritmusok és eljárások sorozatából áll. Ez volt a legjobb és legprcízebb leegyszerűsített leírása az akkoriban még 
            nem létező számítógépeknek. Ez a gép modell nagy és fontos támasz volt az első számítógép, a Colossus megépítésekor, 
            amiben Alan Turing is részt vett.
        </para>
        <figure>
            <title>Turing gép</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/turinggep.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Turing gép</phrase>
                </textobject>
            </mediaobject>
        </figure> 
        <para>
            A kezdetbeli, kiinduló ábrán csak a Kezdő, Lépked és Vég állapotok voltak. Az állapotátmnet gráf olvasása: megnézzük, hogy milyen állapotba vagyunk, majd hogy mit olvasunk és hogy mit 
            fogunk írni, aztán továbblépünk úgy ahogy az él vezet. Három fő jelünk van: 1, 0 és # (üres cella). Ha jól megfigylejük az ábrát akkor rájövünk, hogy a gép sosem fog leállni, tehát ez az egész 
            egy végtelen ciklust fog eredményezni. Végiglépked az input betűin, majd az üres cellákon is, és azt ír vissza amit olvasott. Nézzük meg a Lépked részt, abból máris ki fog derülni. Mint látjuk, ha a 
            gép 0-t olvas, akkor 0-t is fog visszaírni, továbblépni pedig újra csak a Lépked-be fog, tehát visszamegy oda ahonnan jött. Úgyanez a helyzet az 1-es és a #-el is. 
            A Kezdő állapot esetén ha 0-t olvas akkor egy #-et ír és újra a Kezdőbe megy, továbblépni akkor fog ha 1-et kap (1-et fog írni és továbbmegy a Lépkedbe). 
            A végtelen ciklus kikerülése érdekében jött létre a fenti ábra, ahol megjelennek az Elfogadó és Elutasító állapotok is.
            Ez a gép feladat már komplexebb, el tudja dönteni, hogy az input milyen tulajdonságokkal redelkezik. Például döntse el, hogy az input szám (melynek a gép bináris kódját vizsgálja) 
            osztható-e 2-vel. Ha igen (tehát ha a bináris kód 0-ra végződik), akkor a gép az Elfogadó állapotba fog megállni, ha pedig nem osztható (a bináris kód 1-re végződik vagy input hiány esetén), 
            akkor az Elutasító státuszban.
        </para>
        <para>
            Mivel a feladat címében mégiscska az szerepel, hogy decimálisból unárisba való átváltás, ezért nézzünk meg egy programot
            ami ezt meg is valósítja nekünk.
        </para>
        <para> 
            A forráskód megtalálható a következő linken is: <link xlink:href="Forraskodok/Chomsky/3.1/decim.c">../Forraskodok/Chomsky/3.1/decim.c</link>   
        </para> 
        <programlisting language="c">
<![CDATA[#include <stdio.h>

int 
main()
{
	int a, db=0;
	printf("Adjon meg egy decimalis szamot!\n");
	scanf("%d", &a);
	printf("A megadott szam unarisba atvaltva:\n");
	for (int i = 0; i < a; i++)
	{
		printf("|");
		db++;
		if (db % 5 == 0) 
                {
                	printf(" ");
                }
	}
	printf("\n");
	return 0;
}]]>
        </programlisting>
        <para>
            Fordítás: <command>gcc decim.c -o decim</command>
        </para>
        <para>
            Futtatás: <command>./decim</command>
        </para>
        <para>
            A decimális, másképp tízes számrendszerbeli számok a legelterjedtebbek, hiszen a úgy a hétköznapi életben, 
            mint a matematikai tanulmányaink során, ezeket haszáljuk. Az unáris vagy egyes számrendszerbeli számok pedig a 
            legegyszerübbek, ezeket ábrázolásra használjuk. Egy decimális szám, legyen N, unárisan ábrázolva annyit tesz, hogy 
            egy általunk megválasztott karaktert (a mi programunk esetén: "|") N-szer írunk le valamilyen közönkként tördelve a 
            könnyebb olvasás érdekéért (nálunk ez a tördelés ötössével történik). Nézzünk egy példát: a 8-as decimális szám 
            unárisan a következőképpen néz ki: ||||| |||.
        </para>

    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            A generatív gramatika Noam Chomsky nevéhez kötődik. Úgy vizsgálja a nyelvtant mint az ismeret alapját, hiszen ha
            nem lenne nyelvtanunk, akkor a tudást nem tudnánk se megörökíteni, se továbbadni. Nézete azt a vállotta, hogy a tudás 
            és az ismeret többnyire öröklött (generációról generációra terjed), vagyis univerzális (gondolván a gyerekekre, akik 
            könnyedén elsajátítják anyanyelvüket). A generatív gramatikának négy fő része van: nemterminális jelek, terminális jelek, 
            helyettesítési/képzési szabályok és mondat/kezdő szimbólumok, illetve három nyelvtan fajtája: környezetfüggő, környezetfüggetlen 
            és reguláris. Nézzünk meg két példát környezetfüggő leírásra (a nyilak jelölik majd a képzési szabályokat)
        </para>
        <programlisting>
<![CDATA[S, X, Y: „változók” (a nemterminálisok)
a, b, c: „konstansok” (a terminálisok)
S → abc, S → aXbc, Xb → bX, Xc → Ybcc, bY → Yb, aY -> aaX, aY → aa (a helyettesítési szabályok)
S (a mondatszimbólum)

    S (S → aXbc)
    aXbc (Xb → bX)
    abXc (Xc → Ybcc)
    abYbcc (bY → Yb)
    aabbcc

    S (S → aXbc)
    aXbc (Xb → bX)
    abXc (Xc → Ybcc)
    abYbcc (bY → Yb)
    aYbbcc (aY -> aaX)
    aaXbbcc (Xb → bX)
    aabXbcc (Xb → bX)
    aabbXcc (Xc → Ybcc)
    aabbYbccc (bY → Yb)
    aabYbbccc (bY → Yb)
    aaYbbbccc (aY → aa)
    aaabbbccc]]> 
        </programlisting>
        
        <programlisting>
<![CDATA[A, B, C: „változók” (a nemterminálisok)
a, b, c: „konstansok” (a terminálisok)
A → aAB, A → aC, CB → bCc, cB → Bc, C → bc (a képzési szabályok) 
S (A kezdőszimbólum)

    A (A → aAB)
    aAB ( A → aC)
    aaCB (CB → bCc)
    aabCc (C → bc)
    aabbcc

    A (A → aAB)
    aAB ( A → aAB)
    aaABB ( A → aAB)
    aaaABBB ( A → aC)
    aaaaCBBB (CB → bCc)
    aaaabCcBB (cB → Bc)
    aaaabCBcB (cB → Bc)
    aaaabCBBc (CB → bCc)
    aaaabbCcBc (cB → Bc)
    aaaabbCBcc (CB → bCc)
    aaaabbbCccc (C → bc)
    aaaabbbbcccc]]> 
        </programlisting>
        
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            A C utasítás fogalma BNF-ben való definiálása:
        </para>
        <programlisting>
<![CDATA[<utasítás> ::= <kifejezés> | <összetett_utasítás> | <feltételes_utasítás> | <while_utasítás> | <do_utasítás> | <for_utasítás> | <switch_utasítás> | <break_utasítás> | <continue_utasítás> | <return_utasítás> | <goto_utasítás> | <cimke_utasítás> | <nulla_utasítás>

<kifejezés> ::= <értékadás> | <függvényhívás>
<értékadás> ::= <változó><szám>
<változó> ::= <betű>{<betű>}
<betű> ::= a-z
<szám> ::= <számjegy>{<számjegy>}
<számjegy> ::= 0|1|2|3|4|5|6|7|8|9
<függvényhívás> ::= <típus><függvénynév>
<típus> ::= <betű>{<betű>}
<függvénynév> ::= <betű>{<betű>}

<összetett_utasítás> ::= <deklarációlista> | <utasításlista>
<deklarációlista> ::= <deklaráció>{<deklaráció>}
<deklaráció> ::= <típus><változó>
<utasításlista> ::= <utasítás>{<utasítás>}

<feltételes_utasítás> ::= if<kifejezés><utasítás> | if<kifejezés><utasítás>else<utasítás>

<break_utasítás> ::= break

<while_utasítás> ::= while<kifejezés><utasítás> | while<kifejezés><utasítás><break_utasítás>

<do_utasítás> ::= do<utasítás>while<kifejezés> | do<utasítás>while<kifejezés><break_utasítás>

<for_utasítás> ::= for([<kifejezés>][<kifejezés>][<kifejezés>])<utasítás> | for([<kifejezés>][<kifejezés>][<kifejezés>])<utasítás><break_utasítás>

<switch_utasítás> ::= switch<kifejezés><utasítás> | switch<kifejezés><utasítás><case><kifejezés><default> | switch<kifejezés><utasítás><break_utasítás>

<continue_utasítás> ::= continue

<return_utasítás> ::= return | return<kifejezés>

<goto_utasítás> ::= goto<azonosító>

<cimke_utasítás> ::= <azonosító>
<azonosító> ::= <cimke>
<cimke> ::= <betű>{<betű>}

<nulla_utasítás> ::= ]]> 
        </programlisting>
        <para>
            Kódcsipetek, melyek C89-ben nem, de C99-ben viszont lefordulnak:
        </para>
        <programlisting language="c">
<![CDATA[for (int i = 0; i < 10; i++) {
    x=i*i;
printf("%d", x);
}]]> 
        </programlisting>
        <para>
            A C89-ben amikor megadtuk a ciklusok feltételeit, akkor ezzel egyidőben nem lehetett a változókat is deklarálni, hanem ezeket külön kellett megadni.
        </para>
        <programlisting language="c">
<![CDATA[int csere (int a, int b) {
        a = a+b;
        b = a-b;
        a = a-b;    //változók cseréje
}]]> 
        </programlisting>
        <para>
            Ugyanez volt a helyzet a függvények esetében is. 
            A példában szereplő x-et és y-t külön, a függvény deklarálása után, kellett bekérni.
        </para>
        <para>
            A kódcsipetben látunk egy kommentet is (//változók cseréje). A //-es egy soros kikommentelés is azok a dolgok 
            közé tartozik, amikre a C89 hibát adna futtatáskor.
        </para>

    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link> (15:01-től).
        </para>
        <para>
            Megoldás forrása:
        </para>
        <para>
            A lexer egy olyan program amelyik megír, összeállít nekünk egy C programot. A lex programok úgymond több részből tevődnek össze, ezeket a részeket %%-al vannak elválasztva egymástól.
            A mi programunk most 3 részből áll. A programot ezen részletek alapján viszgáljuk meg.
        </para>
        <para> 
            A forráskód megtalálható a következő linken is: <link xlink:href="Forraskodok/Chomsky/3.4/realnumber.l">../Forraskodok/Chomsky/3.4/realnumber.l</link>   
        </para> 
        <programlisting language="c"><![CDATA[%{
#include <stdio.h>
int realnumbers = 0;
%}
digit  	[0-9]
%%]]>
        </programlisting>
        <para>
            A kapcsoszárójelek közötti részt a lexer, úgy ahogy van egy az egyben berakja a C programba. Az első része ismerős a C kódokból, 
            az <command>include</command>-dal deklaráljuk az stdio header fájlt. Ezután egy deklarálás és egyben egy értékadás jön 
            (a <varname>realnumber</varname> változó kezdetben a 0-ás értéket kapja). A a <varname>realnumber</varname> változóval azt számoljuk majd, 
            hogy hány számot olvas be a program. A kapcsoszárójelezett rész után jönnek a definíciók, a mi esetünkben is van egy: a <varname>digit</varname> 
            nevű definícióval egy szám csoportot adunk meg (0-tól 9-ig tartalmazza a számokat, tehát a számjegyeket tárolja). Szögletes zárójelek között egy 
            karaktereket tudunk megadni, de mi most mivel számokat irtunk közé, ezért nem karaktereket, hanem számokat fog tárolni. Majd mindezek után, %%-al
            lezárjuk ezt a részt.
        </para>
        
        <programlisting language="c"><![CDATA[
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%]]>
        </programlisting>
        <para>
            Ebben, a második részben, jelennek meg a fordítási szabályok, ahol már használjuk is a definícióknál megadottakat, tehát egyfajta 
            használati utasítást adunk meg hozzjuk. A <command>{digit}*</command> azt jelenti, hogy a digitből lehet nulla vagy bármennyi darab. 
            Az informatikában a "." karakter magában azt jelenti, hogy amit szeretnlnk azt bármilyen karakterre rá lehet illeszteni. De mivel 
            mi most a lexel azt akarjuk elérni, hogy tokeneket, valós számokat ismerjen fel (tehát olyan formájú számokat, mint például a 3.5, 
            vagyis szám.szám), ezért a "."-ot le kell védeni, amit a / jel segítségével érjük el. A levédett pont után egy újabb kifejezés következik 
            (<command>{digit}+</command>), ami azt takarja hogy a pont után is számjegyek jönnek, bármennyi de legalabb egy mindenképp (+). Ha ez a 
            leírás megegyezik az egyik intup adattal, tehát ha talál egy ilyet, akkor (jön egy utasítássorozat ami {}-ek közé van téve) növeli a 
            <varname>realnumber</varname> értékét, és ezt kiírja a képernyőre először stringkét (%s), melyet el is tárolunk az yytext-be, majd számként 
            kiiratjuk (%f), az <function>atof</function> függvénnyel az <varname>yytext</varname>-ben lévő stringet átkonvertáljuk double típusú számmá.
        </para>
        
        <programlisting language="c"><![CDATA[int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}]]>
        </programlisting>
        <para>
            Az utolsó rész pedig már úgymond maga a tényleges program, ahol meghívjuk az előbb definiált lexikális <function>yylex</function> függvényt, 
            elemzést és miután ez véget ér, akkor kiiratom a valós számok számát, vagyis a <varname>realnumber</varname> értékét.
        </para>
        <para>
            C forráskód létrehozása: <command>lex -o realnumber.c realnumber.l</command>
        </para>
        <para>
            Fordítás: <command>gcc realnumber.c -o realnumber -lfl</command> 
        </para>
        <para>
            Futtatás: <command>./realnumber</command>
        </para>
        <para>
            Egy kép mely illusztrálja a programot mülködés közben (ha nem akarunk több inputot adni a programnak akkor a Ctrl+D-vel lelőjük)
        </para>
        <figure>
            <title>Lexikális elemző</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/lex_elemzo.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Lexikális elemző</phrase>
                </textobject>
            </mediaobject>
        </figure>
        
    </section>                     

    <section>
        <title>Leetspeak</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://www.youtube.com/watch?v=06C_PqDpD_k">https://www.youtube.com/watch?v=06C_PqDpD_k</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/l337d1c7.l">../nbatfai/bhax/blob/master/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/l337d1c7.l</link>  
        </para>
        <para>
            A feladatban Tutorom volt Zabiák Edina. A repója a következő linken érhető el: 
            <link xlink:href="https://gitlab.com/edi.zabi/bhax">https://gitlab.com/edi.zabi/bhax</link> 
        </para>
        <para>
            A Leet egy egyfajta al-abcje az angol nyelvnek, amit legtöbbször az internetes fórumokon, játékokban, tehát többnyire 
            az informatika területén használják. A l33t a latin abc betűit, az ascii karakterek kombinációira cseréli fel, így 
            létrejönnek az érdekesebbnél érdekesebb, furcsa, de ötletes átírások, megnevezések. 
        </para>
        <para> 
            A forráskód megtalálható a következő linken is: <link xlink:href="Forraskodok/Chomsky/3.5/l33tsp3ak.l">../Forraskodok/Chomsky/3.5/l33tsp3ak.l</link>   
        </para> 
        <programlisting language="c">
<![CDATA[%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "@", "/-\\"}},
  {'b', {"b", "8", "|3", "|}"}},
  {'c', {"c", "(", "<", "{"}},
  {'d', {"d", "|)", "|]", "|}"}},
  {'e', {"3", "3", "3", "3"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"g", "6", "[", "[+"}},
  {'h', {"h", "4", "|-|", "[-]"}},
  {'i', {"1", "1", "|", "!"}},
  {'j', {"j", "7", "_|", "_/"}},
  {'k', {"k", "|<", "1<", "|{"}},
  {'l', {"l", "1", "|", "|_"}},
  {'m', {"m", "44", "(V)", "|\\/|"}},
  {'n', {"n", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "0", "()", "[]"}},
  {'p', {"p", "/o", "|D", "|o"}},
  {'q', {"q", "9", "O_", "(,)"}},
  {'r', {"r", "12", "12", "|2"}},
  {'s', {"s", "5", "$", "$"}},
  {'t', {"t", "7", "7", "'|'"}},
  {'u', {"u", "|_|", "(_)", "[_]"}},
  {'v', {"v", "\\/", "\\/", "\\/"}},
  {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"x", "%", ")(", ")("}},
  {'y', {"y", "", "", ""}},
  {'z', {"z", "2", "7_", ">_"}},
  
  {'0', {"D", "0", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%]]>
        </programlisting>
        <para>
            Pont úgy, mint az előző lexiális elemző feladatban, a program szerkezete, felépítése úgyanaz (a három fő rész). Először is 
            megadjuk a header fájloka, majd szintén következnek a definíciók. A definícióknál deklarálunk egy <varname>L337SIZE</varname>-ot,
            ami segítségével meg tudjuk majd határozni az input hosszát. Egy struktúra segítségével 
            létrehozzuk a ciphert ami megkapja a karaktert (amit majd átír), illetve a négy lehetőséget, stringet (amire majd cseréli). 
            Majd ebből a struktúrából létrehozunk egy <varname>l337d1c7</varname> nevű tömbböt (nem adjuk meg az elemeit, azt majd a program 
            megszámol magának), aminek be is adagoljuk az elemeit a struktúra felépítettsége szerint (először a latin betű, majd pedig 
            a négy lehetőség amire cserélheti a program). Ezzek vége is az program első részének.
        </para>

        <programlisting language="c">
<![CDATA[.	{
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%]]>
        </programlisting>
        <para>
            A második részben egy for ciklussal végig megyünk a kapott inputon. Az i-edig (tehár majd rendre mindegyik) 
            latin karaktert átalakítja kisbetűvé, megkeresi az adott listában, random számot generál neki (körülbelül 0-100 közöttit), 
            majd az if résznél lévő vizsgálatok alapján (a random számot vizsgálva) dönti el hogy a latin betűnek melyik megfelelőjét írja 
            ki a négy közül. Ha a random szám kisebb mint 91, akkor az első karaktert választja (az elsőnek a legnagyobb a valószínűsége), 
            ha 91 és 94 közötti, akkor a második lehetőséget, ha 94 és 97 közötti, akkor harmadik lehetőséget, ha pedig 97-től nagyobb, akkor
            az utolsó karaktert választja és írja ki.
        </para>

        <programlisting language="c">
<![CDATA[int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
]]>
        </programlisting>
        <para>
            A program harmadik és egyben utolsó része egy c programrészlet, ahol a <function>yylex()</function> 
            függvényhívással elindítjuk az input átváltoztatását.
        </para>
        <para>
            C forráskód létrehozása: <command>lex -o l33tsp3ak.c l33tsp3ak.l</command>
        </para>
        <para>
            Fordítás: <command>gcc l33tsp3ak.c -o l33tsp3ak -lfl</command> 
        </para>
        <para>
            Futtatás: <command>./l33tsp3ak</command>
        </para>
        <para>
            Egy kép mely illusztrálja a programot mülködés közben (ha nem akarunk több inputot adni a programnak akkor a Ctrl+D-vel lelőjük)
        </para>
        <figure>
            <title>Leetspeak</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/leetspeak.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>Leetspeak</phrase>
                </textobject>
            </mediaobject>
        </figure>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
                <para>
                    Az if megvizsgálja, hogy a SIGINT figylemen kivül volt e hagyva eddig, ha igen akkor maradjon is figylemen kivül, ha pedig nem volt
                    akkor a <function>jelkezelo</function> függvény tegyen róla, kezelje.
                </para>
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>
                <para>
                    Ez a for ciklus addig dolgozik az <varname>i</varname>-vel, amíg hamissá nem válik az a feltétel, 
                    hogy <varname>i</varname> kisebb mint az 5, <varname>i</varname>-t egyesével növeli (a ciklus 5 alaklommal fog lefordulni). Ha kiíratjuk az 
                    <varname>i</varname>-t a for cikluson belül, akkor a következő eredményt kapjuk: 0 1 2 3 4. A <command>++i</command> 
                    inkrementálja az i értékét, és ezt az értéket is téríti vissza, viszont ez, ha az egész egy for cikluson belül 
                    zajlik le, akkor nem látszik meg az eredményen.
                </para>            
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>
                <para>
                    Ez a for ciklus sokban hasonlít az előzőhöz. Ha kiíratjuk az <varname>i</varname>-t a for cikluson belül, 
                    akkor most is a következő eredményt kapjuk: 0 1 2 3 4. A <command>i++</command> szintén inkrementálj az i 
                    értékét, de az eredeti, a növelés előtti értéket adja vissza, nem különbözik az előző eredménytől. Az hogy az 
                    <varname>i</varname>-t milyen formában növeljök, nem befolyásolja azt hogy a for ciklus hányszor fut le.
                </para>            
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting> 
                <para>
                    A for ciklus elméletben 5-ször fodul le, <varname>i</varname>-t 0-ról indítva. A tomb i-edik eleme mindig az <varname>i</varname>
                    egyel nagyobb értékét veszi fel. Ez a ciklus első ránézésre furcsa már az utolsó argumentum miatt, és tényleg mert ez így 
                    egy programba ültetve nem fog lefutni.
                </para>           
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>  
                <para>
                    A for ciklus <varname>i</varname>-vel 0-ról indul, egyesével növelve ezt addig fut le amíg az <varname>i</varname> kisebb 
                    mint az <varname>n</varname> és amíg az a feltétel igaz, hogy a *d++ egyenlő a *s++-al.
                </para>          
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>  
                <para>
                    A <function>printf</function> függvény segítségével kiíratunk a standard kimenetre két egész értéket amelyeket az 
                    <function>f</function> függvény kétszeri meghívása ad vissza.
                </para>          
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>  
                <para>
                    A <function>printf</function> függvény segítségével kiíratunk a standard kimenetre két egész értéket, először az 
                    <function>f</function> függvény visszatérítési értékét, abban az esetben, amikor az <varname>a</varname> változót kapja 
                    paraméterül, illetve magát az <varname>a</varname> értékét.
                </para>          
            </listitem>
            
            <listitem>                                    
                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>   
                <para>
                    A <function>printf</function> függvény segítségével kiíratunk a standard kimenetre két egész értéket, először 
                    <function>f</function> függvény visszatérítési értékét, abban az esetben, amikor az <varname>a</varname> változó 
                    memóricímét kapja paraméterül illetve magát az <varname>a</varname> értékét.
                </para>
            </listitem>
        </orderedlist>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <para>
            A feladatban Horváth Gyulának voltam a tutora.
        </para>
        <programlisting language="tex">
<![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$]]>
        </programlisting> 
        <para>
            Minden valós szám estén létezik egy másik olyan valós szám, ami nagyobb tőle és prím (tehát minden számtól
            van nagyobb prím).
        </para>

        <programlisting language="tex">
<![CDATA[ $(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ ]]>
        </programlisting>
        <para>
            Minden valós szám esetén létezik egy másik olyan valós szám ami nagyobb tőle, prím és a tőle kettővel 
            nagyobb valós szám is prímszám (tehát véges sok ikerprím van). 
        </para> 

        <programlisting language="tex">
<![CDATA[ $(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ ]]>
        </programlisting>
        <para>
            Létezik olyan y valós szám minden x valós szám esetén, hogy ha az x prímszám, 
            akkor az x kisebb mint az y (tehát véges sok prímszám van).
        </para> 

        <programlisting language="tex">
<![CDATA[ $(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$ ]]>
        </programlisting> 
        <para>
            Létezik olyan y minden x esetén, hogy ha y kisebb mint az x, akkor az x nem prímszám (tehát ugyanaz 
            mint az előző esteben, vagyis hogy véges sok prímszám van).
        </para>
   
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>  
        <para>
            Vezesd be egy programba (forduljon le) a következőket. / Mit vezetnek be a programba a következő nevek?
        </para>           

        <itemizedlist>
            <listitem> 
                <para>egész</para>  
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>  
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <para>egész referenciája</para>  
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészek tömbje</para> 
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para> 
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>  
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>  
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>  
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>   
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para> 
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>         
    </section>          
       <section>
        <title>Vörös Pipacs Pokol/csiga (diszkrét mozgási parancsokkal)</title>
        <para>
            Írj olyan Minecraft MALMÖ python programot, amivel Steve csigavonalban járja be a pályát a diszkrét mozgási parancsok felhasználásával.
        </para>
        <para>
            Megoldás videó: <link xlink:href="">Megoldás</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Forraskodok/Chomsky/csiga_diszkret.py">
            	<filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Forraskodok/Chomsky/csiga_diszkret.py</filename>
            </link>, <link xlink:href="http://hackers.inf.unideb.hu:443/RedFlowerHell/">http://hackers.inf.unideb.hu:443/RedFlowerHell/</link>
        </para>
        <para>
            A feladat nem változott a folytonos mozgásos csigához képest, mindössze az irányítást kell átszabni a diszkrét mozgási parancsokhoz. A <literal>while</literal> cikluson belül egy <literal>for</literal> ciklus lépteti Steve-et blokkonként kezdetben 9 blokkal, majd minden egyes "táv" megtétele után eggyel nő a <literal>szamlalo</literal>, aminek értékét egy <literal>if</literal> vizsgálja. Ha 4-gyel osztva 0 az érték, az azt jelenti, körbeértünk, tehát Steve ugrik egyet, előre megy még egy blokknyit és elfordul, a megteendő "távolságot" tároló <literal>uthossz</literal> változónk nő. Egyéb esetben csak fordul egyet és növeli a megtett oldalakat számoló <literal>szamlalo</literal> változót. Ezzel elértük, hogy a diszkrét mozgási parancsokkal közel ugyanazt az utat járjuk be, mint a 2.9 feladatban.
        </para>
        <programlisting language="python"><![CDATA[class Steve:
    def __init__(self, agent_host):
        self.agent_host = agent_host
        
        self.nof_red_flower = 0

    def run(self):
        world_state = self.agent_host.getWorldState()
        uthossz = 9
        szamlalo = 0
        while world_state.is_mission_running:
            for i in range(uthossz):
                self.agent_host.sendCommand( "move 1" )
                time.sleep(.5)
            szamlalo = szamlalo + 1
            if szamlalo % 4 == 0:
                self.agent_host.sendCommand( "jumpmove 1" )
                time.sleep(.5)
                self.agent_host.sendCommand( "move 1" )
                time.sleep(.5)
                self.agent_host.sendCommand( "turn 1" )
                time.sleep(.5)
                uthossz = uthossz + 4
            else:
                self.agent_host.sendCommand( "turn 1" )
                time.sleep(.5)
            world_state = self.agent_host.getWorldState()
]]></programlisting> 
    </section> 



</chapter>     
