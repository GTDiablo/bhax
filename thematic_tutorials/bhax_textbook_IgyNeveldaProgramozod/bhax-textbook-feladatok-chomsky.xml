<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Chomsky!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Decimálisból unárisba átváltó Turing gép</title>
        <para>
            Állapotátmenet gráfjával megadva írd meg ezt a gépet!
        </para>
        <para>
            Megoldás videó: Készül
        </para>
        <para>
            Megoldás forrása:<link xlink:href="https://turingmachine.io/">https://turingmachine.io/</link>
            Fájl forrása:  <link xlink:href="../../code/Chomsky/unaris.c">
                <filename>code/Chomsky/unaris.c</filename>
            </link>              
        </para>
        <para>
            Az unáris számrendszer a természetes számok leírására alkalmas. Általában egyesekkel vagy pálcikákkal jelöljük a számokat, de bármilyen szimbólumot is bevezethetünk. A szimbólumot annyiszor írjuk le, amennyi az ábrázolandó számunk értéke.
        </para>
        <programlisting language="c">
        <![CDATA[
        #include <stdio.h>

int main(){
    int x;
    printf("Adjon meg egy értéket: ");
    scanf("%d", &x);
    for(int i=0; i<x; ++i)
        printf("1");
    printf("\n");
    return 0;
    
}
        ]]>
        </programlisting>
    </section>        
        
    <section>
        <title>Az a<superscript>n</superscript>b<superscript>n</superscript>c<superscript>n</superscript> nyelv nem környezetfüggetlen</title>
        <para>
            Mutass be legalább két környezetfüggő generatív grammatikát, amely ezt a nyelvet generálja!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Chomsky 4 különböző osztályba csoportosította a grammatikákat (általános, környezetfüggő, környezetfüggetlen, reguláris). Ebben a feladatban környezetfüggő grammatikákkal foglalkozunk, ezeknek a helyetesítési szabályai xYz → xyz alakúak. </para> <para>
            Ebben az esetben a levezetési szabályok mindkét oldalán szerepelhetnek terminális szimbólumok, melyeket konstansoknak nevezünk és kisbetűkkel jelöljük. 
            A nem terminális szimbólumokat változóknak nevezzük és nagybetűkkel jelöljük.
            Mindkét esetben a levezetést a kezdő szimbólummal (S) kezdjük. Ez egy kitüntetett, nem terminális elem.

        </para>

        <programlisting language="c">
        <![CDATA[
                      S, X, Y változók
              a, b, c konstansok
        Szabályok:
              S  -> abc 
              S  -> aXbc
              Xb -> bX
              Xc -> Ybcc
              bY -> Yb
              aY -> aaX
              aY -> aa
        Levezetés:
            S       (S → aXbc)
            aXbc    (Xb → bX)
            abXc    (Xc → Ybcc)
            abYbcc  (bY → Yb)
            aYbbcc  (aY -> aaX)
            aaXbbcc (Xb → bX)
            aabXbcc (Xb → bX)
            aabbXcc (Xc → Ybcc)
            aabbYbccc (bY → Yb)
            aabYbbccc (bY → Yb)
            aaYbbbccc (aY → aa)
            aaabbbccc

        ]]>
        </programlisting>
    </section>        
                
    <section>
        <title>Hivatkozási nyelv</title>
        <para>
            A <citation>KERNIGHANRITCHIE</citation> könyv C referencia-kézikönyv/Utasítások melléklete alapján definiáld 
            BNF-ben a C utasítás fogalmát!
            Majd mutass be olyan kódcsipeteket, amelyek adott szabvánnyal nem fordulnak (például C89), mással (például C99) igen.
        </para>
        <para>
            Megoldás videó: Jön
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Az alábbi programok C89 szabvánnyal nem fognak lefordulni. Az első esetben a for ciklusfejben történő deklaráció miatt, a második esetben pedig az egysoros komment miatt.
        </para>
            <programlisting language="c"><![CDATA[
#include <stdio.h>

int main()
{
    for(int i=0; i<4; i++)
    {
        printf("Hello world!");
    }
}
]]></programlisting>
<programlisting language="c"><![CDATA[
#include <stdio.h>

int main()
{
    //int a = 89;
}
 ]]></programlisting>  

    <para>
    Az új szabvány létrejöttével számos újdonság jelent meg, például: változó méretű tömbök, új függvények, új adattípusok, új header állományok. Néhány dolgot a C++ -ból emeltek át. 
    </para>
    </section>                     

    <section>
        <title>Saját lexikális elemző</title>
        <para>
            Írj olyan programot, ami számolja a bemenetén megjelenő valós számokat! 
            Nem elfogadható olyan megoldás, amely maga olvassa betűnként a bemenetet, 
            a feladat lényege, hogy lexert használjunk, azaz óriások vállán álljunk és ne kispályázzunk!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/9KnMqrkj_kU">https://youtu.be/9KnMqrkj_kU</link> (15:01-től).
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Chomsky/realnumber.l">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/realnumber.l</filename>
            </link> 
        </para>
        <programlisting language="c"><![CDATA[%{
#include <stdio.h>
int realnumbers = 0;
%}
digit	[0-9]
%%
{digit}*(\.{digit}+)?	{++realnumbers; 
    printf("[realnum=%s %f]", yytext, atof(yytext));}
%%
int
main ()
{
 yylex ();
 printf("The number of real numbers is %d\n", realnumbers);
 return 0;
}
]]></programlisting>
        <para>
            A lexer gyakorlatilag egy szövegelemző program. Beolvas egy forráskódot és felismeri benne a tokeneket, melyek a program építőelemei.
        </para>
        <para>
        A fenti program három fő részből áll, melyeket <command>%%</command> jelek választják el egymástól. Az első részben történnek a deklarációk. Megadjuk, hogy mit értünk számjegynek(0 és 9 közötti számokat). A második részben a valós számokat definiáljuk: bármennyi számjegy(lehet nulla is, ezt a <command>*</command> jelzi) + pont + bármennyi számjegy, de legalább egy(<command>+</command> jelzi). Ha a program talál egy számot, akkor növeli a realnumbers változó értékét eggyel, illetve kiírja a találatot. A program utolsó része már teljesen C nyelvben látható, ahol függvénymeghívást és a találatok számának kiírását láthatjuk. A program futásához szükséges a flex telepítése, majd fordításkor a -lfl kapcsoló használata.
        </para>
    </section>                     

    <section>
        <title>Leetspeak</title>
        <para>
            Lexelj össze egy l33t ciphert!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/06C_PqDpD_k">https://youtu.be/06C_PqDpD_k</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Chomsky/l337d1c7.l">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/l337d1c7.l</filename>
            </link>  
        </para>
        <programlisting language="c"><![CDATA[%{
  #include <stdio.h>
  #include <stdlib.h>
  #include <time.h>
  #include <ctype.h>

  #define L337SIZE (sizeof l337d1c7 / sizeof (struct cipher))
    
  struct cipher {
    char c;
    char *leet[4];
  } l337d1c7 [] = {

  {'a', {"4", "4", "@", "/-\\"}},
  {'b', {"b", "8", "|3", "|}"}},
  {'c', {"c", "(", "<", "{"}},
  {'d', {"d", "|)", "|]", "|}"}},
  {'e', {"3", "3", "3", "3"}},
  {'f', {"f", "|=", "ph", "|#"}},
  {'g', {"g", "6", "[", "[+"}},
  {'h', {"h", "4", "|-|", "[-]"}},
  {'i', {"1", "1", "|", "!"}},
  {'j', {"j", "7", "_|", "_/"}},
  {'k', {"k", "|<", "1<", "|{"}},
  {'l', {"l", "1", "|", "|_"}},
  {'m', {"m", "44", "(V)", "|\\/|"}},
  {'n', {"n", "|\\|", "/\\/", "/V"}},
  {'o', {"0", "0", "()", "[]"}},
  {'p', {"p", "/o", "|D", "|o"}},
  {'q', {"q", "9", "O_", "(,)"}},
  {'r', {"r", "12", "12", "|2"}},
  {'s', {"s", "5", "$", "$"}},
  {'t', {"t", "7", "7", "'|'"}},
  {'u', {"u", "|_|", "(_)", "[_]"}},
  {'v', {"v", "\\/", "\\/", "\\/"}},
  {'w', {"w", "VV", "\\/\\/", "(/\\)"}},
  {'x', {"x", "%", ")(", ")("}},
  {'y', {"y", "", "", ""}},
  {'z', {"z", "2", "7_", ">_"}},
  
  {'0', {"D", "0", "D", "0"}},
  {'1', {"I", "I", "L", "L"}},
  {'2', {"Z", "Z", "Z", "e"}},
  {'3', {"E", "E", "E", "E"}},
  {'4', {"h", "h", "A", "A"}},
  {'5', {"S", "S", "S", "S"}},
  {'6', {"b", "b", "G", "G"}},
  {'7', {"T", "T", "j", "j"}},
  {'8', {"X", "X", "X", "X"}},
  {'9', {"g", "g", "j", "j"}}
  
// https://simple.wikipedia.org/wiki/Leet
  };
  
%}
%%
.	{
	  
	  int found = 0;
	  for(int i=0; i<L337SIZE; ++i)
	  {
	  
	    if(l337d1c7[i].c == tolower(*yytext))
	    {
	    
	      int r = 1+(int) (100.0*rand()/(RAND_MAX+1.0));
	    
          if(r<91)
	        printf("%s", l337d1c7[i].leet[0]);
          else if(r<95)
	        printf("%s", l337d1c7[i].leet[1]);
	      else if(r<98)
	        printf("%s", l337d1c7[i].leet[2]);
	      else 
	        printf("%s", l337d1c7[i].leet[3]);

	      found = 1;
	      break;
	    }
	    
	  }
	  
	  if(!found)
	     printf("%c", *yytext);	  
	  
	}
%%
int 
main()
{
  srand(time(NULL)+getpid());
  yylex();
  return 0;
}
]]></programlisting>
        <para>
            Ez a program egy beolvasott szöveget karakterenként alakít át a l337d1c7 tömbben definiált módon. A struct-ban adjuk meg a karakterek lehetséges "titkosított" változatát. A program elején definiáljuk a tömb méretét, így nem szükséges azt előre megadni. Ezáltal könnyen hozzá tudunk írni a tömbhöz, kiegészíthetjük bármennyi tetszőleges elemmel anélkül, hogy a sorok megszámolásával és a méret átírásával foglalkoznánk. A program tehát karakterenként vizsgálja a szöveget. Ha az aktuális karaktert megtalálja a tömbben, akkor egy véletlenszerűen generált szám alapján(sorsolással) kiválaszt a megadott négy lehetséges karakter közül egyet. Ha az aktuálisan vizsgált karakter nem találja meg a tömbben, akkor pedig ugyanúgy, változatlanul kiírja. Az utolsó részben az srand() függvény a random szám generátort ( rand() ) inicializálja. A fordítás során a -lfl kapcsoló szükséges, ez a flex library-ra hivatkozik
        </para>
    </section>                     


    <section>
        <title>A források olvasása</title>
        <para>
            Hogyan olvasod, hogyan értelmezed természetes nyelven az alábbi kódcsipeteket? Például
            <programlisting><![CDATA[if(signal(SIGINT, jelkezelo)==SIG_IGN)
    signal(SIGINT, SIG_IGN);]]></programlisting>
            Ha a SIGINT jel kezelése figyelmen kívül volt hagyva, akkor ezen túl is legyen
            figyelmen kívül hagyva, ha nem volt figyelmen kívül hagyva, akkor a jelkezelo függvény
            kezelje. (Miután a <command>man 7 signal</command> lapon megismertem a SIGINT jelet, a
            <command>man 2 signal</command> lapon pedig a használt rendszerhívást.)
        </para>

        <caution>
            <title>Bugok</title>
            <para>
                Vigyázz, sok csipet kerülendő, mert bugokat visz a kódba! Melyek ezek és miért? 
                Ha nem megy ránézésre, elkapja valamelyiket esetleg a splint vagy a frama?
            </para>
        </caution>
            
        <orderedlist numeration="lowerroman">
            <listitem>                                    
                <programlisting><![CDATA[if(signal(SIGINT, SIG_IGN)!=SIG_IGN)
    signal(SIGINT, jelkezelo);]]></programlisting>
            </listitem>
            <listitem>                                    
                <programlisting><![CDATA[for(i=0; i<5; ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<5; tomb[i] = i++)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[for(i=0; i<n && (*d++ = *s++); ++i)]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a, ++a), f(++a, a));]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(a), a);]]></programlisting>            
            </listitem>
            <listitem>                                    

                <programlisting><![CDATA[printf("%d %d", f(&a), a);]]></programlisting>            
            </listitem>
        </orderedlist>
        <para>i. Ha a SIGINT jel nincs figyelmen kívül hagyva(ignorálva), akkor ezentúl a jelkezelő függvény kezelje azt. </para>
        <para>ii. For ciklus legyen ötször végrehajtva. Nullától indítjuk, iterációnként eggyel inkrementáljuk i értékét. Az inkrementáció alakja preorder, a következő iterációnál i értéke i+1 lesz. A feltétel alapján i utolsó értéke 4 lesz, mivel ez az utolsó érték, amire teljesül a feltétel(ötnél kisebb).  </para>
         <para>iii. Az előző példától annyiban különbözik, hogy az inkrementáció alakja postorder, de ez nem változtat az iterációk számán, ugyanúgy ötször fog lefutni a ciklus.   </para>
         <para>iv. For ciklus, mely ötször fog lefutni. Ránézésre azt várjuk, hogy a tömb i-edik elemének helyére i+1-et ír, tehát az elemek sorra 1,2,3,4,5 lesznek. Azonban nem teljesen ez fog történni, az első(nulladik) elem változatlan marad, utána pedig az elemek sorra 1,2,3,4 lesznek. Ha a tömb első eleme eredetileg nem volt feltöltve értékkel, akkor random szám lesz a helyén. Ez hibának tekinthető, splint-tel futtatva "Parse Error" jelzést kapunk. </para>
         <para>v. For ciklus, mely addig fut, amíg teljesül két feltétel: az egyik, hogy i értéke kisebb, mint n értéke. A másik feltételt vizsgáljuk meg részletesen. Először visszakapjuk d és s értékét, majd azokat a következő iterációban növeljük. S és d mutatók, tehát az inkrementálás itt azt jelzi, hogy a következő elemre mutatnak. A <command>*</command> dereferencia jelzés visszaadja azt az értéket, amire mutatnak. Ebben a zárójelben tehát ha tömbről beszélünk, akkor d értéknek helyébe azt az értéket írja, amire s mutat. Lényegében egy tömb(d) értékeit lecseréli a másik tömb(s) értékeire. Azonban ez csak akkor működne tökéletesen, ha n értéke pontosan megegyezne a két tömb méretével. Splint-tel futtatva szintén "Parse Error" jelzést kapunk. </para>
    <para>vi. Standart kimenetre írunk. Kétszer hívjuk meg ugyanazt a függvényt, egyszer a-val és a+1-gyel, majd fordítva. Nem ajánlott egy zárójelen belül ilyet tenni, mivel nem azt fogjuk kapni amit első ránézésre gondolnánk. Ez a kódcsipet hibásnak tekinthető, annak ellenre, hogy le fog futni. Splint-tel futtatva ezt kapjuk(részlet): 
         </para>
         <para>vii. Szintén a standard kimenetre írunk, először f-et hívjuk meg a-val és a visszatért értéket írjuk ki, majd a eredeti értékét íratjuk ki. A értékén nem változtat a függvényhívás akkor se, ha a függvényben módosítjuk azt. </para>
         <para>viii. A változó címét argumentumként átatjuk az f függvénynek és kiiratjuk amivel visszatér, majd kiírjuk a (eredeti) értékét is a standard kimenetre. </para>
        


        <para>
            Megoldás forrása:  
        </para>

        <para>
            Megoldás videó: Jön
        </para>

    </section>                     

    <section>
        <title>Logikus</title>
        <para>
            Hogyan olvasod természetes nyelven az alábbi Ar nyelvű formulákat?
        </para>
        <programlisting language="tex"><![CDATA[$(\forall x \exists y ((x<y)\wedge(y \text{ prím})))$ 

$(\forall x \exists y ((x<y)\wedge(y \text{ prím})\wedge(SSy \text{ prím})))$ 

$(\exists y \forall x (x \text{ prím}) \supset (x<y)) $ 

$(\exists y \forall x (y<x) \supset \neg (x \text{ prím}))$
]]></programlisting>        
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/MatLog_LaTeX</link>
        </para>

        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/ZexiPy3ZxsA">https://youtu.be/ZexiPy3ZxsA</link>, <link xlink:href="https://youtu.be/AJSXOQFF_wk">https://youtu.be/AJSXOQFF_wk</link>
        </para>

        <para>
            1. Minden számhoz(x) létezik egy nála nagyobb szám(y), ami prím. Azaz, a prímszámok száma végtelen.
        </para>
        <para>
        2. Minden x-hez létezik egy nála nagyobb y, hogy: y és y+2 is prímszám. Vagy: minden számnál(x) tudunk egy annál nagyobbat mondani(y), amire igaz hogy ő(y) és a kettővel nagyobb(y+2) értékű szám is prím. Azaz, az ikerprímek száma végtelen.
        </para>
        <para>
        3. Létezik egy szám(y), ami minden másik prímszámnál(x) nagyobb. Tehát minden prímszámnál(x) létezik egy nagyobb szám(y), ami nem prím.
        </para>
        <para>
        4. Ekvivalens átalakításokat végezve ugyanazt kapjuk, mint az első példában: minden számhoz(x) létezik egy nála nagyobb szám(y), ami prím. Azaz, a prímszámok száma végtelen. 
        </para>
        
    </section>                                                                                                                                                                            

    <section>
        <title>Deklaráció</title>
            
        <para>
            Vezesd be egy programba (forduljon le) a következőket: 
        </para>

        <itemizedlist>
            <listitem>
                <para>egész</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egész referenciája</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészek tömbjének referenciája (nem az első elemé)</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatók tömbje</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvény</para>                        
            </listitem>
            <listitem>
                <para>egészre mutató mutatót visszaadó függvényre mutató mutató</para>                        
            </listitem>
            <listitem>
                <para>egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvény</para>                        
            </listitem>            
            <listitem>
                <para>függvénymutató egy egészet visszaadó és két egészet kapó függvényre mutató mutatót visszaadó, egészet kapó függvényre</para>                        
            </listitem>            
        </itemizedlist>            

        <para>
            Mit vezetnek be a programba a következő nevek?
        </para>

        <itemizedlist>
            <listitem>
                <programlisting><![CDATA[int a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *b = &a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int &r = a;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int c[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (&tr)[5] = c;]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *d[5];]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *h ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int *(*l) ();]]></programlisting>            
            </listitem>
            <listitem>
                <programlisting><![CDATA[int (*v (int c)) (int a, int b)]]></programlisting>            
            </listitem>            
            <listitem>
                <programlisting><![CDATA[int (*(*z) (int)) (int, int);]]></programlisting>            
            </listitem>            
        </itemizedlist>       


        <para>
            Megoldás videó: 
        </para>
        <para>
            Megoldás forrása:  
        </para>
        <para>
            Az utolsó két deklarációs példa demonstrálására két olyan kódot
            írtunk, amelyek összahasonlítása azt mutatja meg, hogy miért 
            érdemes a <command>typedef</command> használata: <link xlink:href="Chomsky/fptr.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/fptr.c</filename>
            </link>,
            <link xlink:href="Chomsky/fptr2.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Chomsky/fptr2.c</filename>.
            </link>  
            
        </para>
        <programlisting><![CDATA[#include <stdio.h>

int
sum (int a, int b)
{
    return a + b;
}

int
mul (int a, int b)
{
    return a * b;
}

int (*sumormul (int c)) (int a, int b)
{
    if (c)
        return mul;
    else
        return sum;

}

int
main ()
{

    int (*f) (int, int);

    f = sum;

    printf ("%d\n", f (2, 3));

    int (*(*g) (int)) (int, int);

    g = sumormul;

    f = *g (42);

    printf ("%d\n", f (2, 3));

    return 0;
}]]></programlisting>            
        <programlisting><![CDATA[#include <stdio.h>

typedef int (*F) (int, int);
typedef int (*(*G) (int)) (int, int);

int
sum (int a, int b)
{
    return a + b;
}

int
mul (int a, int b)
{
    return a * b;
}

F sumormul (int c)
{
    if (c)
        return mul;
    else
        return sum;
}

int
main ()
{

    F f = sum;

    printf ("%d\n", f (2, 3));

    G g = sumormul;

    f = *g (42);

    printf ("%d\n", f (2, 3));

    return 0;
}
]]></programlisting>            
        <para>
            A mutatók memóriacímet tárolnak. Ha egy változó elé <command>*</command> jelet írunk, akkor viszont a változó értékét kérdezzük le. Dereferenciával tudjuk egy változó memóriacímét lekérdezni.
        </para>
    </section>                     


</chapter>                
