<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Gutenberg!</title>
        <keywordset>
            <keyword/>
        </keywordset>
        <cover>
            <para>
                Programozás tankönyvek rövid olvasónaplói.
            </para>
        </cover>
    </info>
    <section>
        <title>Programozási alapfogalmak</title>
        <para>         
            <citation>PICI</citation>       
        </para>
        <para><command>Juhász István: Magas szintű programozási nyelvek I. </command></para>
         <para><command>1.2 Alapfogalmak </command></para>
        <para>
            Ebben a fejezetben megismerkedhetünk a programozáshoz szükséges alapfogalmakkal, alapeszközökkel. Olvashatunk arról, hogyan készülhet a forrásszövegből kétféle módon gépi nyelvű kód, amit a processzor végre tud hajtani. Az egyik módszer a fordítóprogramos, mely során a fordító a forráskód alapján egy tárgyprogramot készít. Ennek folyamata során különböző elemzések hajtódnak végre(lexikális, szintaktikai, szemantikai). Az interpreteres módszer esetében nem készül tárgyprogram, hanem közvetlenül a forráskód utasításai hajtódnak végre. Bizonyos programnyelvek a két módszert egyszerre is alkalmazzák. 
        </para>
        <para>
            Továbbá megismerkedhetünk a programonyelvek 3 osztályával:  imperatív, deklaratív, egyéb nyelvek. Imperatív nyelvek esetén algoritmusokat írunk, melyek a processzort működstetik. Fontos jellemző, hogy a változók többször is kaphatnak értéket a program során és ezek a tár közvetlen elérését biztosítják. Ebbe a csoportba tartoznak az objektumorientált és az eljárásorientált nyelvek.
            A deklaratív nyelvek ettől eltérőek: nem algoritmikusak, tehát utasításokból állnak. A változók csak egyszer kaphatnak értéket a program futása során, illetve móriaműveletekere általában nincs lehetőség. Az előző csoporttal ellentétben a deklaratív nyelvek nem kötődnek szorosan a Neumann-architektúrához.
        </para>
        <para>
            Minden programnyelvhez tartoznak szintaktikai és szemantikai szabályok, melyek a hivatkozási nyelvben vannak definiálva. A könyvben az implementációk kapcsán említésre kerül a hordozhatóság problémája, melyet a mai napig sem sikerült tökéletesen megoldani. Ez főleg régebbi időkben jelentett nagyobb problémát: a nyelvek nem voltak megfelelően szabványosítva, így bizonyos programok nem futottak le különböző gépeken. 
        </para>
        <para><command>2. Alapelemek </command></para>
        <para>
            Ez a fejezet részletesen foglalkozik a karakterkészletekkel, melyek alapvető építőelemei a forráskódnak. Ez a készlet minden programozási nyelvnél eltérő, viszont számjegyek esetén egységes elvet követnek. Egyéb alapfogalmakat is részletez a könyv, pl: kulcsszó, standard azonosító, címke, literálok.  
        </para>
         <para>
            A forrásszöveg készítésénél bizonyos szabályokra oda kell figyelnünk, például, hogy milyen szerepe van a sortörésnek. Eszerint két csoportba oszthatjuk a nyelveket. A kötött formátumú nyelvek esetén soronként egy utasítás jelenhet meg, szabad formátumú nyelvek esetén pedig egy sorban bármennyi utasítás állhat. Ebben az esetben az utastásokat pontosvesszővel zárjuk.
        </para>
        <para><command>3. Kifejezések </command></para>
        <para>
            Kifejezés alatt egy olyan szintaktikai eszközt értünk, mely egy ismert értéknek egy új értéket állít elő. Alkotóelemei az operandusok, operátorok és a kerek zárójelek. Az operátorok hajtják végre a műveleteket. Aszerint, hogy hány operandussal végzik ezt, 3 csoportba oszthatjuk őket: unáris, bináris és ternáris operátorok. Bináris operátorok esetén beszélhetünk prefix, infix és postfix alakról aszerint, hogy hol helyezkedik el az operátor az operandusokhoz viszonytíva(elöl, közöttük, mögöttük). A végeredmény meghatározásának folyamatát a kifejezés kiértékelésének nevezzük. A fejezet a továbbiakban a C nyelvben használt kifejezéseket részletezi.
        </para>
        <para><command>4. Utasítások </command></para>
        <para>
            Az utasítások az algoritmusok fontos egységei, melyek segítségével készül a tárgyprogram. Beszélhetünk deklarációs és végrehajtó utasításokról. Az előbbi a fordítóprogrammal áll közvetlen kapcsolatban, nem kerülnek lefordításra és nem áll mögöttük tárgykód. Az végrehajtó utasításokból pedig a fordítóprogram készíti elő a tárgykódot. A fejezet a továbbiakban az elágaztató és ciklusszervező utasításokat, valamint ezek különböző típusait taglalja példákkal illusztrálva, több nyelvben.
        </para>
    </section> 

    </section>        
    <section>
        <title>Programozás bevezetés</title>
        <para>                
            <citation>KERNIGHANRITCHIE</citation>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/zmfT9miB-jY">https://youtu.be/zmfT9miB-jY</link>
        </para> 
        <para><command>1. Alapismeretek</command></para>
        <para>
            Az első fejezetben olvashatjuk a könyv rövid ismertetését, illetve az alapismeretek bemutatását. A könyv bizonyos szintű előismeretet feltételez az olvasótól, így viszonylag lényegretörően és tömören fogalmaz. Itt olvashatunk többek között az értékadásról, ciklusokról, elágazásokról, tömbökről, függvényekről. A fogalmakat rövid programokon keresztül ismerteti. Gyakorlófeladatok biztostásával készteti az olvasót arra, hogy elsajátítsa az új ismereteket.
        </para>
        
        <para><command>2. Típusok, operátorok és kifejezések</command></para>
        <para>
            Ebben a fejezetben olvashatunk a változókról, az azokra vonatkozó megkötésekről, adattípusokról, operátorokról, típuskonverziókról. Ezenkívül bemutatja a feltételes kifejezések használatát is, azaz hogy hogyan írhatunk feltételt az if elágazás használata nélül. A fejezet végén felhívja a figyelmet a kiértékelési sorrend határozatlanságára: ügyeljünk arra, hogy ne írjunk olyan programot, mely különböző gépeken különböző eredményt adhat!
        </para>
        
        <para><command>3. Vezérlési szerkezetek </command></para>
        <para>
            Itt olvashatunk bizonyos alapvető szintaktikai szabályokról(zárójelek használata, pontosvessző), különböző utasításokról(switch, break, continue, goto), illetve a do-while, for és else-if részletes ismertetéséről. Ezek közül a continue utaítást használjuk legritkábban, ez egy ciklusban elhelyezve a következő iteráció megkezdését idézi elő. A break utasítással kiléphetünk a legbelső ciklusból, a goto-val pedig egy másik helyre ugorhatunk a programban. A könyv arra ösztönzi az olvasót, hogy a goto utasítás használatát lehetőleg mellőzze, minden program megírható nélküle is.
        </para>
        
        <para><command>4. Függvények és programstruktúra </command></para>
        <para>
           Ez a fejezet a függvényeket helyezi középpontba. A függvények használatának számos előnye van: műveletek elrejtése, átláthatóság, módosítások megkönnyítése. Az elv az, hogy könnyebben tudunk kezelni több kisebb programot, mint egy nagyot. Továbbá, a korábban megírt függvényeket természetesen többször is felhasználhatjuk, ezáltal növelve a hatékonyságot és gyorsaságot. A könyv ismerteti az extern deklarációt, mely segítségével biztosítani tudjuk egy másik állományban lévő változó elérését. Fontos még megemlíteni a statikus változókat, melyek mindig a memóriában vannak.  Állandóak, tehát a függvényből kilépve is megőrzik értéküket, illetve nem jönnek létre és szűnnek meg minden egyes függvényhívás alkalmával. 
        </para>
        <para><command>5. Mutatók és tömbök </command></para>
        <para>
           A mutatók a C nyelv sajátosságának tekinthetőek. A kezdő programozóknak általában nehézségeket okoznak, viszont ha elsajátítjuk a használatát, tömörebb és hatékonyabb programokat tudunk írni. A mutató egy változó, mely egy másik változó címét tárolja, műveleteket is végezhetünk velük, inicializálhatóak is. A könyv ismerteti a mutatók használatát tömbök esetén is. Ilyenkor fontos, hogy több dologra is oda kell figyelnünk, például hogy ne végezzünk különböző tömböket megcímző mutatókkal műveleteket, mert ez valószínűleg néhány gépen nem fog működni.
        </para>
        <para><command>6. Struktúrák </command></para>
        <para>
          A struktúra egy vagy több, akár más-más típusó változók együttese, csoportja. Nagyobb programok esetén hasznosak lehetnek: növelik az átláthatóságot, kezelhetőséget. Nagyobb adatstruktúrák szervezésében nyújtanak nagy segítséget, lehetővé teszik, hogy több adatot egy egészként tudjunk kezelni. Más nyelveken, pl PASCAL-ban a rekord elnevezést kapták. A struktúra elemeit tagoknak nevezzük, ezeknek lehetnek megegyező elnevezései. Ha egy deklarált struktúrát nem töltünk fel változókkal, akkor az nem foglal tárhelyet a memóriába, csupán a szerkezetet, alakot adja meg. A struktúrákat egymásba ágyazhatjuk, viszont nem adhatjuk át függvényeknek, illetve függvény sem adhat vissza struktúrát. A könyv a bináris fa példáján keresztül szemléltet, ahol a rekurziós eljárás is említésre kerül. Ezenkívül ismerteti a mezők és unionok használatát.
        </para>
         <para><command>7. Bevitel és kivitel </command></para>
        <para>
          Ebben a fejezetben lényegretörő bemutatást kapunk a standard be-és kiviteli könyvtárról, melyre
          <programlisting language="c"><![CDATA[#include <stdio.h> ]]></programlisting>
              módon hivatkozhatunk. Részletezést kapunk a be-és kivitelről, hibakezelésről, de a rendszerhívásról és tárhelykezelésről is szót ejt a könyv.
        </para>
         <para><command>8. Csatlakozás a UNIX operációs rendszerhez </command></para>
        <para>
          A könyv itt is feltételez egy bizonyos szintű előismeretet, nem foglalkozik az UNIX rendszerek ismertetésével. Ez a fejezet leginkább példák bemutatásából áll és mélyebb betekintést ad a C programozásba.
        </para>

    </section>        
    <section>
        <title>Programozás</title>
        <para>                
            <citation>BMECPP</citation>
        </para>
    </section>
<section>
        <title>Python bevezetés</title>
        <para>                
          Forrás
         <link xlink:href="http://users.atw.hu/progmat/letoltesek/Bevezetes%20a%20molbiprogramozasba.pdf">http://users.atw.hu/progmat/letoltesek/Bevezetes%20a%20molbiprogramozasba.pdf</link>
        </para>
        <para>
        	Általános információk
        </para>
        <para>
   			A Python egy magas szintű, általános célú programozási nyelv. A szkriptnyelvek családjába szokták sorolni. Guido vn Rossum 1990-ben alkotta meg. Egyik legnagyobb erőssége a funckiógazdag standard könyvtára, jól bővíthető. 
        </para>
        <para>
        	Python-futtatókörnyezet számtalan különféle rendszerre létezik, így több mobilplatformra is(Apple IPhone, Palm, Windows Phone).
        </para>
        <para>
        	A nyelv népszerűségét nagymértékben az egyszerűségének köszönheti. Elsősorban kliensszoftverek, prototípusok készítésére alkalmas. 
        </para>
        <para>
        	A Python nyelv jellemzői
        </para>
        <para>
        	Amikor alkalmazásokat készítünk és szükség van egy olyan program rész megírására ami a probléma szemponjából irrelváns, elkészítése mégis sok időt venne igénybe akkor a Python egy nagyon hasznos opció. Nem kell fordítani, elég az értelmezőnek a Python forrást megadni és az automatikus futtatja is az adott alkalmazást. A Pythonra tekinthetünk valódi programozási nyelvként is, mivel sokkal többet kínál, mint az általános szkript nyelvek vagy batch file-ok.
        </para>
        <para>
        	A Python tulajdonságai
        </para>
        <para>
        	A Python nyelvhez szorosan kapcsolódó standard Python kódkönyvtár rengeteg újrahasznosítható modult tartalmaz ,amelyek meggyorsítják az alkalmazásfejlesztést. Ilyen modulok találhatóak például fájlkezelésrem hálózatkezelésre, különféle rendszerhívásokra és akár felhasználói felület kialakítására is. Illetve az internete is egyre több Python példakód és leírás található amely segít a nyelvelsajátításában.
        	</para>
        	<para>
        	A Python egy köztes nyelv , nincs szükség fordításra se linkelésre, az értelmező interkaktían is használható. A Python segítségével tömörebb mégis olvashatóbb programokat készíthetünk amelyek rövidebbek(általában), mint a velük ekvivalens C,C++ vagy Java programok. Ennek okai a követketkezők:
        	</para>
        	<para>
        	A magas szintű adattípusok lehetővé teszik ,hogy összetett kifejezéseket írjunk le egy rövid állításban.
        </para>
        <para>
        	A kódcsoportosítás egyszerű tagolással (új sor, tabulátor) történik, nincs szükség nyitó és zárójelezésre.
        </para>
        <para>
        	Nincs szükség változó vagy argumentumdefiniálására.
        </para>
        <para>
        	A Python nyelv bemutása
        </para>
        <para>
        	Alap vető szintaxis
        </para>
        <para>
        		# A kód szerkesztése
        	</para>
        	<para>
        	A Python nyelv legfőbb jellemzője , hogy behúzásalapu a szintaxisa. A programban szereplő állításokat az azonos szintű behúzásokkal tudjuk csoportba szervezni, nincs szükség kapcsos zárójelrevagy expilict kulcsszavakra. A sor végéig tart egy utasítás. Ha egy utasítás csak több sorban fér el ezt sor végére írt '\'-el kell jelezni.
        </para>
        <para>
        	AZ értelmező minden sort tokenekre bont. A token különböző fajtái a következők: azonosító, kulcsszó, operátor, delimiter, literál. A kis és nagybetűket Pythonban megkülönböztetjük. A Pythonban vannak lefoglaltak kulcssszavak, azok megtekinkhetőek a forrásban.
        	</para>
        	<para>
        		Típusok és változók
        	</para>
        	<para>
        		# Típusok
        	</para>
        	<para>
        		Pythonban minden adatot objektumok reprezentálnak. Az adatokon végezhető műveleteket az objektum típusa határozza meg. Nincs szükség változók típusának megadására, azt a rendszer automatikus "kitalálja". Adattípusok a következők lehetnek: számok, sztringek, ennesek, listák, szótárak. A Pythonban is van a NULL értéknek megfelelő típus, itt None a neve.
        	</para>
        	<para>
        		# Változók és alkalmazásuk
        	</para>
        	<para>
        		Pythonban a változók alatt az egyes objektumokra mutató referenciákat értünk. Maguknak a változóknak nincsenek típusai. A változó értékadása egyszerűen '=' jel segítségével történik. A Python nyelvben egyaránt létezenek globális és lokális változók. 
        	</para>
        	<para>
        	 # A nyelve eszközei
        	</para>
        	<para>
        		Például print metódus, amivel sztringet vagy más változót írhatunk ki a konzolra.</para>
        		<para>
        			A nyelv támogatja a más nyelvekben megszokott if elágazást if/elif/else kulcsszavakkal.
        		</para>
        		<para>
        			Természetesen támogatja a különféle ciklusok kezelését is, mint a for ciklus, while ciklus. Illetve támogatja a C-ben megismert break és continue kulcsszavakat is.
        		</para>
        		<para>
        			Címkéket a label paranccsal helyezhetünk e a kód egyes részeiben , és ezekhez a goto paranccsal ugorhatunk. 
        		</para>
        		<para>
        			Függvények
        		</para>
        		<para>
        			Pythonban függvényeket a def kulcsszóval definiálhatunk. A függvények rendelkeznek paraméterekkel, amelyeknek a szokásos megkötésekkel és szintaxissal alapértelmezett értékeket is adhatunk. A függvényekenek egy visszatérési értékük van azonban visszatérhetnek például ennesekkel is. 
        		</para>
        		<para>
        			Osztályok és objektumok
        		</para>
        		<para>
        			A Python nyelv támogatja a klasszikus, objektum orientált eljárásokat. Definiálhatunk osztályokat, amelyek pédényai objektumok. Az osztályoknak lehetnek attribútumaik: objektumok, illetve függvények. Ez utóbbiakat metódusnak vagy tagfüggvénynek is hívjuk. Ezenkívül az osztályok örökölhetnek más osztályokvól is. Az osztályoknak lehet egy speciális, konstruktor tulajdonságú metódusa, az __init __.
        		</para>
        		<para>
        			Modulok
        		</para>
        		<para>
        			A Python a fejlesztés megkönnyítése érdekében sok szabványis modult tartalmaz. Például: appuifw, messaging,syinfo,camera,audio.
        		</para>
        		<para>
        			Kivételkezelés
        		</para>
        		<para>
        		A Python nyelv támogatja a váratlan helyzetek kezelésére az úgynevetett kivételeket. Ebben,egyszerű esetben a try kulcsszó után írva szerepel az a kódblokk, amelyben a kivételes helyzet előállhat, majd ezt az expect blokk követi , amelyre a hiba esetén kerül a vezérlés, illetve opcionálisan egy else ág. Az utóbbi kettőt kiválthatja egyetlen finally blokk.
        		</para>

    </section>

</chapter>                
